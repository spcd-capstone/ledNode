/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : RxBuf.h
**     Project     : ledNode
**     Processor   : MKL25Z128VLK4
**     Component   : RingBuffer
**     Version     : Component 01.025, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2015-11-11, 21:16, # CodeGen: 4
**     Abstract    :
**         This component implements a ring buffer for different integer data type.
**     Settings    :
**          Component name                                 : RxBuf
**          Buffer Size                                    : 128
**     Contents    :
**         Clear           - void RxBuf_Clear(void);
**         Put             - byte RxBuf_Put(RxBuf_ElementType elem);
**         Get             - byte RxBuf_Get(RxBuf_ElementType *elemP);
**         NofElements     - RxBuf_BufSizeType RxBuf_NofElements(void);
**         NofFreeElements - RxBuf_BufSizeType RxBuf_NofFreeElements(void);
**         Init            - void RxBuf_Init(void);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2014, all rights reserved.
**     Web: http://www.mcuoneclipse.com
**     This an open source software of an embedded component for Processor Expert.
**     This is a free software and is opened for education,  research  and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/
/*!
** @file RxBuf.h
** @version 01.00
** @brief
**         This component implements a ring buffer for different integer data type.
*/         
/*!
**  @addtogroup RxBuf_module RxBuf module documentation
**  @{
*/         

#ifndef __RxBuf_H
#define __RxBuf_H

/* MODULE RxBuf. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "CS1.h"

#include "Cpu.h"


#define RxBuf_BUF_SIZE    128   /* number of elements in the buffer */
#define RxBuf_ELEM_SIZE   1  /* size of a single element in bytes */
  #define RxBuf_IS_REENTRANT   1  /* 1: Critical section used for accessing shared data, 0 otherwise */
#if RxBuf_ELEM_SIZE==1
  typedef uint8_t RxBuf_ElementType; /* type of single element */
#elif RxBuf_ELEM_SIZE==2
  typedef uint16_t RxBuf_ElementType; /* type of single element */
#elif RxBuf_ELEM_SIZE==4
  typedef uint32_t RxBuf_ElementType; /* type of single element */
#else
  #error "illegal element type size in properties"
#endif
#if RxBuf_BUF_SIZE<=256
  typedef uint8_t RxBuf_BufSizeType; /* up to 256 elements (index 0x00..0xff) */
#else
  typedef uint16_t RxBuf_BufSizeType; /* more than 256 elements, up to 2^16 */
#endif

byte RxBuf_Put(RxBuf_ElementType elem);
/*
** ===================================================================
**     Method      :  RxBuf_Put (component RingBuffer)
**     Description :
**         Puts a new element into the buffer
**     Parameters  :
**         NAME            - DESCRIPTION
**         elem            - New element to be put into the buffer
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte RxBuf_Get(RxBuf_ElementType *elemP);
/*
** ===================================================================
**     Method      :  RxBuf_Get (component RingBuffer)
**     Description :
**         Removes an element from the buffer
**     Parameters  :
**         NAME            - DESCRIPTION
**       * elemP           - Pointer to where to store the received
**                           element
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

RxBuf_BufSizeType RxBuf_NofElements(void);
/*
** ===================================================================
**     Method      :  RxBuf_NofElements (component RingBuffer)
**     Description :
**         Returns the actual number of elements in the buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of elements in the buffer.
** ===================================================================
*/

void RxBuf_Init(void);
/*
** ===================================================================
**     Method      :  RxBuf_Init (component RingBuffer)
**     Description :
**         Initializes the data structure
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

RxBuf_BufSizeType RxBuf_NofFreeElements(void);
/*
** ===================================================================
**     Method      :  RxBuf_NofFreeElements (component RingBuffer)
**     Description :
**         Returns the actual number of free elements/space in the
**         buffer.
**     Parameters  : None
**     Returns     :
**         ---             - Number of elements in the buffer.
** ===================================================================
*/

void RxBuf_Clear(void);
/*
** ===================================================================
**     Method      :  RxBuf_Clear (component RingBuffer)
**     Description :
**         Clear (empty) the ring buffer.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

/* END RxBuf. */

#endif
/* ifndef __RxBuf_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
